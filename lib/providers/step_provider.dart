import 'dart:async';
import 'package:flutter/foundation.dart';
import '../services/step_counter_service.dart';
import '../services/step_service.dart';
import '../services/background_step_sync_service.dart';

class StepProvider with ChangeNotifier {
  final StepCounterService _stepService = StepCounterService();
  final StepService _firestoreStepService = StepService();
  final BackgroundStepSyncService _backgroundSync = BackgroundStepSyncService();
  
  int _steps = 0;
  bool _isInitialized = false;
  String? _currentUserId;
  Timer? _saveTimer;
  Timer? _systemStepsRefreshTimer;
  int _lastSavedSteps = 0;
  bool _useSystemSteps = false; // Utiliser Google Fit / Health Connect
  
  // üÜï MODE HYBRIDE : Variables pour combiner syst√®me + capteur local
  bool _hybridMode = false; // Mode hybride actif
  int _systemBaseSteps = 0; // Valeur de r√©f√©rence depuis Google Fit
  int _localIncrementSteps = 0; // Incr√©ment d√©tect√© par le capteur local
  int _lastLocalSensorValue = 0; // Derni√®re valeur brute du capteur

  int get steps => _steps;
  bool get isInitialized => _isInitialized;
  bool get usingSystemSteps => _useSystemSteps;
  
  double get distance => _stepService.getDistanceInKm();
  int get calories => _stepService.getCalories();
  
  double getProgress(int goal) => _stepService.getProgress(goal);

  // Initialize step counter
  Future<void> initialize({String? userId, bool forceReinit = false}) async {
    if (_isInitialized && userId == _currentUserId && !forceReinit) return;
    
    // Si on force la r√©initialisation, nettoyer les anciens timers
    if (forceReinit) {
      _saveTimer?.cancel();
      _systemStepsRefreshTimer?.cancel();
      _isInitialized = false;
    }
    
    _currentUserId = userId;
    
    // üîÑ MODE HYBRIDE : Essayer d'utiliser Google Fit + Capteur local simultan√©ment
    if (_currentUserId != null && !kIsWeb) {
      try {
        debugPrint('üîÑ Tentative d\'initialisation Google Fit / Health Connect...');
        await _backgroundSync.startPeriodicSync(_currentUserId!);
        _useSystemSteps = true;
        debugPrint('‚úÖ Utilisation de Google Fit / Health Connect activ√©e');
        
        // üöÄ SYNCHRONISATION IMM√âDIATE au d√©marrage
        debugPrint('üîÑ Synchronisation imm√©diate des pas au d√©marrage...');
        await _backgroundSync.forceSyncNow();
        
        // R√©cup√©rer les pas du jour depuis le syst√®me (base de r√©f√©rence)
        final systemSteps = await _backgroundSync.getTodaySteps();
        if (systemSteps >= 0) {
          _systemBaseSteps = systemSteps;
          _steps = systemSteps;
          _localIncrementSteps = 0;
          await _stepService.setSteps(systemSteps);
          debugPrint('‚úÖ Pas r√©cup√©r√©s depuis le syst√®me (base): $systemSteps');
        }
        
        // üÜï ACTIVER LE MODE HYBRIDE : D√©marrer aussi le capteur local
        try {
          debugPrint('üöÄ Activation du MODE HYBRIDE (Google Fit + Capteur local)...');
          await _stepService.initialize();
          _hybridMode = true;
          _startHybridListening(); // Nouvelle m√©thode hybride
          debugPrint('‚úÖ MODE HYBRIDE activ√© avec succ√®s!');
        } catch (e) {
          debugPrint('‚ö†Ô∏è Impossible d\'activer le capteur local hybride: $e');
          _hybridMode = false;
        }
        
        // Notifier les listeners pour mettre √† jour l'UI
        notifyListeners();
        
        // Rafra√Æchir les pas du syst√®me toutes les 5 minutes
        _startHybridSystemRefresh();
      } catch (e) {
        debugPrint('‚ö†Ô∏è Impossible d\'utiliser le syst√®me, fallback sur capteur local: $e');
        _useSystemSteps = false;
        _hybridMode = false;
        notifyListeners();
      }
    }
    
    // Fallback : Utiliser UNIQUEMENT le capteur local si Google Fit √©choue
    if (!_useSystemSteps && !kIsWeb) {
      debugPrint('üö∂ D√©marrage du capteur de pas local (fallback)...');
      await _stepService.initialize();
      _startListening();
      _startAutoSave();
      debugPrint('‚úÖ Capteur de pas local d√©marr√©');
    }
    
    // Charger les pas du jour depuis Firestore
    if (_currentUserId != null) {
      await _loadTodayStepsFromFirestore();
      
      // Si on utilise le mode hybride, ajuster la base syst√®me
      if (_useSystemSteps && _hybridMode) {
        // En mode hybride, si Firestore a une valeur sup√©rieure, l'utiliser comme base
        if (_steps > _systemBaseSteps) {
          debugPrint('‚ÑπÔ∏è Firestore a plus de pas ($_steps), mise √† jour de la base syst√®me');
          _systemBaseSteps = _steps;
          _localIncrementSteps = 0;
          await _stepService.setSteps(_steps);
          notifyListeners();
        } else if (_systemBaseSteps > _steps) {
          debugPrint('‚ÑπÔ∏è Google Fit a plus de pas ($_systemBaseSteps), conservation');
          _steps = _systemBaseSteps;
          await _stepService.setSteps(_steps);
          notifyListeners();
        }
      } else if (_useSystemSteps) {
        // Mode syst√®me pur (sans hybride)
        final systemSteps = await _backgroundSync.getTodaySteps();
        if (systemSteps > _steps) {
          _steps = systemSteps;
          await _stepService.setSteps(systemSteps);
          notifyListeners();
          debugPrint('‚úÖ Utilisation des pas Google Fit (plus r√©cent): $systemSteps');
        } else if (_steps > 0) {
          debugPrint('‚ÑπÔ∏è Conservation des pas Firestore (plus r√©cent): $_steps');
        }
      }
    }
    
    _isInitialized = true;
  }
  
  // üÜï MODE HYBRIDE : √âcouter le capteur local en temps r√©el
  void _startHybridListening() {
    Future.delayed(const Duration(milliseconds: 500), () async {
      if (_isInitialized && _hybridMode) {
        final currentSensorValue = _stepService.todaySteps;
        
        // Premi√®re lecture : initialiser la base du capteur
        if (_lastLocalSensorValue == 0) {
          _lastLocalSensorValue = currentSensorValue;
          debugPrint('üîß Capteur local initialis√© √†: $currentSensorValue');
        }
        
        // D√©tecter les nouveaux pas depuis la derni√®re lecture
        if (currentSensorValue > _lastLocalSensorValue) {
          final newSteps = currentSensorValue - _lastLocalSensorValue;
          _localIncrementSteps += newSteps;
          _lastLocalSensorValue = currentSensorValue;
          
          // Calculer le total : Base Google Fit + Incr√©ment local
          final newTotal = _systemBaseSteps + _localIncrementSteps;
          
          if (newTotal != _steps) {
            _steps = newTotal;
            await _stepService.setSteps(_steps);
            notifyListeners();
            debugPrint('üö∂ Nouveau pas d√©tect√©! Total: $_steps (base: $_systemBaseSteps + local: $_localIncrementSteps)');
            
            // Sauvegarde si changement significatif
            if (_currentUserId != null && (_steps - _lastSavedSteps) >= 10) {
              _saveStepsToFirestore();
            }
          }
        }
        
        // Continuer l'√©coute
        _startHybridListening();
      }
    });
  }
  
  // üÜï MODE HYBRIDE : Re-synchroniser avec Google Fit toutes les 5 minutes
  void _startHybridSystemRefresh() {
    _systemStepsRefreshTimer?.cancel();
    _systemStepsRefreshTimer = Timer.periodic(
      const Duration(minutes: 5),
      (timer) async {
        if (_useSystemSteps && _hybridMode) {
          debugPrint('üîÑ Re-synchronisation hybride avec Google Fit...');
          
          // Forcer une synchronisation avec Google Fit
          await _backgroundSync.forceSyncNow();
          final systemSteps = await _backgroundSync.getTodaySteps();
          
          debugPrint('üìä Comparaison: Google Fit=$systemSteps vs Local=$_steps (base=$_systemBaseSteps + incr=$_localIncrementSteps)');
          
          // Si Google Fit a une valeur sup√©rieure, l'utiliser comme nouvelle base
          if (systemSteps > _steps) {
            debugPrint('‚úÖ Google Fit est plus √† jour, mise √† jour de la base');
            _systemBaseSteps = systemSteps;
            _localIncrementSteps = 0;
            _lastLocalSensorValue = _stepService.todaySteps; // R√©initialiser le capteur
            _steps = systemSteps;
            await _stepService.setSteps(systemSteps);
            notifyListeners();
          } else if (_steps > systemSteps) {
            // Si le local a d√©tect√© plus de pas, sauvegarder dans Firestore
            debugPrint('‚ÑπÔ∏è Le capteur local a d√©tect√© plus de pas ($_steps), conservation de la valeur locale');
            // La prochaine sync Google Fit devrait r√©cup√©rer ces pas
          }
          
          debugPrint('üîÑ Synchronisation hybride termin√©e: $_steps pas');
        }
      },
    );
    
    // D√©marrer aussi l'auto-save
    _startAutoSave();
  }

  // Charger les pas du jour depuis Firestore
  Future<void> _loadTodayStepsFromFirestore() async {
    if (_currentUserId == null) return;
    
    try {
      final today = DateTime.now();
      final todayRecord = await _firestoreStepService.getStepsByDate(
        _currentUserId!,
        today,
      );
      
      if (todayRecord != null && todayRecord.steps > 0) {
        _steps = todayRecord.steps; // ‚úÖ IMPORTANT : Mettre √† jour les pas affich√©s
        _lastSavedSteps = todayRecord.steps;
        
        // ‚úÖ CRITIQUE : Synchroniser le StepCounterService pour que distance/calories soient calcul√©es
        await _stepService.setSteps(todayRecord.steps);
        
        notifyListeners(); // ‚úÖ Notifier l'UI
        debugPrint('‚úÖ Pas charg√©s depuis Firestore pour le ${today.day}/${today.month}: ${todayRecord.steps}');
      } else {
        // Aucun enregistrement pour aujourd'hui, mais on peut avoir des pas du capteur
        debugPrint('‚ÑπÔ∏è Aucun enregistrement Firestore pour aujourd\'hui ${today.day}/${today.month}');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement des pas: $e');
    }
  }

  // Listen to step updates
  void _startListening() {
    // Update steps every second
    Future.delayed(const Duration(seconds: 1), () {
      if (_isInitialized) {
        final newSteps = _stepService.todaySteps;
        if (newSteps != _steps) {
          _steps = newSteps;
          notifyListeners();
          
          // Sauvegarde imm√©diate si changement significatif (>= 10 pas)
          if (_currentUserId != null && (_steps - _lastSavedSteps) >= 10) {
            _saveStepsToFirestore();
          }
        }
        _startListening();
      }
    });
  }

  // Start auto-save timer
  void _startAutoSave() {
    _saveTimer?.cancel();
    
    // Sauvegarder toutes les 2 minutes
    _saveTimer = Timer.periodic(const Duration(minutes: 2), (timer) {
      if (_currentUserId != null && _steps != _lastSavedSteps) {
        _saveStepsToFirestore();
      }
    });
  }

  // Sauvegarder les pas dans Firestore
  Future<void> _saveStepsToFirestore() async {
    if (_currentUserId == null || _steps == 0) return;
    
    try {
      await _firestoreStepService.saveSteps(
        _currentUserId!,
        _steps,
        DateTime.now(),
      );
      _lastSavedSteps = _steps;
      debugPrint('‚úÖ Pas sauvegard√©s dans Firestore: $_steps');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la sauvegarde des pas: $e');
    }
  }

  // Forcer la sauvegarde (appel√© manuellement si n√©cessaire)
  Future<void> forceSave() async {
    if (_currentUserId != null) {
      if (_useSystemSteps) {
        await _backgroundSync.forceSyncNow();
      } else {
        await _saveStepsToFirestore();
      }
    }
  }
  
  // Synchroniser l'historique depuis le syst√®me
  Future<void> syncHistoricalData(int days) async {
    if (_currentUserId != null && _useSystemSteps) {
      await _backgroundSync.syncHistory(days);
      notifyListeners();
    }
  }
  
  // Obtenir les pas actuels depuis le syst√®me
  Future<void> refreshFromSystem() async {
    if (_useSystemSteps) {
      final systemSteps = await _backgroundSync.getTodaySteps();
      if (systemSteps >= 0) {
        _steps = systemSteps;
        notifyListeners();
      }
    }
  }

  // Reset steps
  Future<void> resetSteps() async {
    await _stepService.resetSteps();
    _steps = 0;
    _lastSavedSteps = 0;
    notifyListeners();
  }

  @override
  void dispose() {
    _saveTimer?.cancel();
    _systemStepsRefreshTimer?.cancel();
    if (_useSystemSteps) {
      _backgroundSync.stopPeriodicSync();
    }
    _isInitialized = false;
    super.dispose();
  }
}

